import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫", layout="wide")

st.title(":truck: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ - —ç–∫—Å–ø–µ–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –ø–æ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏")


df = pd.read_csv('data/perevozki_processing.csv')

with st.sidebar:
    rasstoyanie_km_peremennayay = st.slider('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', min_value=df['rasstoyanie_km'].min(
    ), max_value=df['rasstoyanie_km'].max(), value=5000.0, step=500.0)
    
    
    all_status = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
                             value=True, key='all_status')
    if all_status:
        selected_status = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:',
            options=df['status_perevozki'].unique(),
            default=df['status_perevozki'].unique())
    else:
        selected_status = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:', options=df['status_perevozki'].unique())


    all_cargo = st.checkbox(
        "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",  value=True, key='all_cargo')
    if all_cargo:
        selected_cargo_type = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', options=df['gorod_zagruzki'].unique(), default=df['gorod_zagruzki'].unique())
    else:
        selected_cargo_type = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', options=df['gorod_zagruzki'].unique())


    all_cargop = st.checkbox(
        "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è",  value=True, key='all_cargop')
    if all_cargop:
        selected_cargop_type = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è:', options=df['gorod_razgruzki'].unique(), default=df['gorod_razgruzki'].unique())
    else:
        selected_cargop_type = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è:', options=df['gorod_razgruzki'].unique())
    all_identificatin = st.checkbox('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ', value=True, key='all_identificatin')
    options = df['identification_otklonenie_ot_plana_dney'].unique()

    if all_identificatin:
        selected_identification_otlklonenie = st.multiselect(
            '–¢–∏–ø –∑–∞–¥–µ—Ä–∂–∫–∏',
            options=options,
            default=options  
        )
    else:
        selected_identification_otlklonenie = st.multiselect(
            '–¢–∏–ø –∑–∞–¥–µ—Ä–∂–∫–∏',
            options=options
    )



filtered_df = df[
    (df['status_perevozki'].isin(selected_status)) &
    (df['gorod_zagruzki'].isin(selected_cargo_type)) &
    (df['gorod_razgruzki'].isin(selected_cargop_type)) &
    (df['rasstoyanie_km'].le(rasstoyanie_km_peremennayay)) &
    (df['identification_otklonenie_ot_plana_dney'].isin(selected_identification_otlklonenie))]

st.dataframe(filtered_df)


st.write("---")
st.markdown("###  –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
col1, col2, col3, col4 = st.columns(4)
with col1:
    avg_profit = filtered_df['pribyl'].mean()
    st.metric(label="–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", value=f"{avg_profit:,.2f} —Ç—ã—Å.—Ä—É–±.")
with col2:
    total_distance = filtered_df['rasstoyanie_km'].sum()
    st.metric(label="–°—É–º–º–∞—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", value=f"{total_distance:,.0f} –∫–º")
with col3:
    avg_delivery_time = round(filtered_df['srok_dostavki'].mean(), 2)
    st.metric(label="–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏",
              value=f"{avg_delivery_time:,.1f} –¥–Ω–µ–π")
with col4:
    mod_machine_type = filtered_df['marka_model_avto'].mode()
    if not mod_machine_type.empty:
        st.metric(label='–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
                  value=mod_machine_type[0])
    else:
        st.metric(label='–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
                  value='–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

st.write("---")
st.header('üì¶ –ü—Ä–∏–±—ã–ª—å –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –≥—Ä—É–∑–∞')
fig = px.bar(
    filtered_df.groupby('tip_gruza')['pribyl'].sum().reset_index(),
    x='tip_gruza',
    y='pribyl')
st.plotly_chart(fig, use_container_width=True)

fig.add_hline(
    y=filtered_df['sebestoimost_perevozki'].mean(),
    line_dash="dot",
    annotation_text=f"–°—Ä–µ–¥–Ω—è—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {filtered_df['sebestoimost_perevozki'].mean():,.2f}",
    annotation_position="bottom right"
)

st.write("---")
st.header(':material/attach_money: –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è')
fig_scatter = px.scatter(filtered_df, x='rasstoyanie_km', y='pribyl',
                         color='status_perevozki')
st.plotly_chart(fig_scatter, use_container_width=True)

st.write("---")
st.header('‚öñÔ∏è –î–æ–ª—è –≥—Ä—É–∑–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É –≤–µ—Å—É –≥—Ä—É–∑–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º '
          '(–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å vs –ø–æ–ª—É—á–∞—Ç–µ–ª—å)')

df_shippers = filtered_df.groupby('gruzootpravitel')[
    'tonnazh_gruza_tonn'].sum().reset_index()
df_shippers.columns = ['–ö–æ–º–ø–∞–Ω–∏—è', '–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å']
df_shippers['–†–æ–ª—å'] = '–ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'


df_consignees = filtered_df.groupby('gruzopoluchatel')[
    'tonnazh_gruza_tonn'].sum().reset_index()
df_consignees.columns = ['–ö–æ–º–ø–∞–Ω–∏—è', '–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å']
df_consignees['–†–æ–ª—å'] = '–ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å'


df_combined = pd.concat([df_shippers, df_consignees])


fig = px.bar(
    df_combined,
    x='–ö–æ–º–ø–∞–Ω–∏—è',
    y='–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å',
    color='–†–æ–ª—å',
    barmode='group',
    labels={
        '–ö–æ–º–ø–∞–Ω–∏—è': '–ö–æ–º–ø–∞–Ω–∏—è',
        '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º': '–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –≥—Ä—É–∑–∞ (—Ç–æ–Ω–Ω)',
        '–†–æ–ª—å': '–†–æ–ª—å'
    }
)
fig.update_layout(
    xaxis_title_text='–ö–æ–º–ø–∞–Ω–∏—è',
    yaxis_title_text='–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –≥—Ä—É–∑–∞ (—Ç–æ–Ω–Ω)',
    legend_title_text='–†–æ–ª—å',
    xaxis={'categoryorder': 'total descending'}
)

fig.update_layout(
    width=800,
    height=600)
st.plotly_chart(fig)

st.write("---")
st.header(':material/local_shipping: –î–æ–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –ø–æ —Ç–∏–ø—É –∫—É–∑–æ–≤–∞')
df_grouped = filtered_df.groupby(['tip_kuzova', 'marka_model_avto']).size(
).reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–∑–æ–∫')
fig_pie_cargo = px.pie(
    df_grouped,
    values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–∑–æ–∫',
    names='tip_kuzova',
    hole=0.3)
fig_pie_cargo.update_traces(
    textposition='inside',
    textinfo='percent+label',
    textfont_size=20)
fig_pie_cargo.update_layout(
    width=800,
    height=600)
fig_pie_cargo.update_traces(marker=dict(
    line=dict(width=1, color='DarkSlateGrey')))
st.plotly_chart(fig_pie_cargo, use_container_width=True)
